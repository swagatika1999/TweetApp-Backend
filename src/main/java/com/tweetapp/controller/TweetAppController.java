package com.tweetapp.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.tweetapp.config.MessagingConfig;
import com.tweetapp.model.Comments;
import com.tweetapp.model.TweetPostingStatus;
import com.tweetapp.model.Tweets;
import com.tweetapp.model.UserRegistration;
import com.tweetapp.model.UserRequest;
import com.tweetapp.model.UserResponse;
import com.tweetapp.service.CommentService;
import com.tweetapp.service.SequenceGeneratorService;
import com.tweetapp.service.TweetService;
import com.tweetapp.service.UserRegistrationService;
import com.tweetapp.utils.JwtUtil;

import lombok.extern.log4j.Log4j2;

@RestController
@Log4j2
@CrossOrigin(origins="http://localhost:3000")
public class TweetAppController {
	
	@Autowired
	private UserRegistrationService userRegistrationService;
	
	@Autowired
	private TweetService tweetService;
	
	@Autowired
	private JwtUtil util;
	
	@Autowired
	private SequenceGeneratorService sequenceGeneratorService;
	
	@Autowired
	private CommentService commentService;
	
	@Autowired
	private RabbitTemplate rabbitTemplate;
	
	//Registration
	@PostMapping(value="/register")
	public ResponseEntity<Object> userRegistration(@RequestBody @Valid UserRegistration user,
			BindingResult bindingResult) throws Exception {
		if(bindingResult.hasErrors() || userRegistrationService.validationFailureCheck(user)) {
			return new ResponseEntity<>("User not created.",HttpStatus.BAD_REQUEST);
		}
		userRegistrationService.addNewRegisteredUser(user);
		return new ResponseEntity<>("User created successfully",HttpStatus.CREATED);
	}
	
	
	//Login
	@PostMapping(value="/login")
	public ResponseEntity<UserResponse> userLogin( @RequestBody UserRequest request){
		if(userRegistrationService.loginUser(request.getLoginId(),request.getPassword())) {
			String token=util.generateToken(request.getLoginId());
			return new ResponseEntity<>(new UserResponse(request.getLoginId(),token,"success"),HttpStatus.ACCEPTED);
			
		}
		return new ResponseEntity<>(new UserResponse(request.getLoginId(),null,"failed"),HttpStatus.BAD_REQUEST);
			
	}
	
	
	//Forgot password
	@PutMapping(value="/{username}/forgot")
	public ResponseEntity<Object> forgotPassword(@PathVariable String username,@RequestBody  UserRegistration userRegistration){
		try {
			if(userRegistrationService.validateUsername(username)) {
				userRegistrationService.forgotPassword(username,userRegistration);
			return new ResponseEntity<>("Password updated successfully",HttpStatus.ACCEPTED);
		  }
		}
		catch(Exception e) {
			log.info("unable to change password");
		}
		
		return new ResponseEntity<>("Not able to change the password.",HttpStatus.BAD_REQUEST);
	}
	
	//Post tweet
	@PostMapping(value="/postTweet/{username}/add")
	public ResponseEntity<Object> postTweet(@RequestBody @PathVariable (value="username") String loginId, 
			@RequestBody @Valid Tweets tweet,BindingResult bindingResult) throws Exception
	{
		//generate tweet id autogenerated
		tweet.setTweetId(sequenceGeneratorService.getSequenceNumber(Tweets.SEQUENCE_NAME));
		if(tweetService.validateUsername(loginId) || !(bindingResult.hasErrors())) {
			tweetService.postTweets(loginId,tweet);
			TweetPostingStatus tweetPostingStatus=new TweetPostingStatus(tweet,"In Process","Tweet posted successfully");
			rabbitTemplate.convertAndSend(MessagingConfig.EXCHANGE1, MessagingConfig.ROUTINGKEY, tweetPostingStatus);
			return new ResponseEntity<>(tweet,HttpStatus.CREATED);		
			
		}
		return new ResponseEntity<>("Unable to post tweet",HttpStatus.BAD_REQUEST);		

	}
		
	//get all user
	@GetMapping(value="/users/all")
	public List<UserRegistration> getAllUsers()
	{
		List<UserRegistration> users=userRegistrationService.getAllUsersWithUsername();
		if(users == null) {
			log.info("Users list is null {}",users);
		}
		
		return users;

	}
	
	//get all tweets
	@GetMapping(value="/all")
	public List<Tweets> getAllTweets(){
		return tweetService.getAllTweets();
	}
	
	//get all tweets of a user
	@GetMapping(value="/tweets/{username}")
	public List<Tweets> getAllTweetsByUsername(@RequestBody @PathVariable String username){
		return tweetService.getAllTweetsByUsername(username);
	}

	//get particular tweet of a user
	@GetMapping(value="/tweetsbyId/{tweetId}")
	public Tweets getTweetByUsername(@RequestBody @PathVariable int tweetId){
		return tweetService.getATweet(tweetId);
	}
	
	//search by usernames fully or partially.
	@GetMapping(value="/tweets/user/search/{username}")
	public List<String> searchUserByUsername(@RequestBody @PathVariable String username){
		List<String> searchUsername= tweetService.findByUsername(username); 
		if(searchUsername==null) {
			log.info("List is null");
		}
		return searchUsername;
	}
	
	//delete tweet by tweetid
	@DeleteMapping(value="/tweets/{username}/delete/{id}")
	public boolean deleteByTweetIdOfUser( @PathVariable String username, @PathVariable int id){
		if(tweetService.validateUsername(username)) {
			tweetService.deleteTweetsById(id);
			return true;
		}
		return false;
	}
	
	//update tweet
	@PutMapping(value="/tweets/{username}/update/{id}")
	public ResponseEntity<Object> updateTweet(@PathVariable String username,@PathVariable int id ,@RequestBody Tweets tweet){
		try {
			if(tweetService.validateUsername(username)) {
				
				tweetService.updateTweetsByTweetId(id,username,tweet );
			return new ResponseEntity<>("User updated tweet",HttpStatus.ACCEPTED);
		  }
		}
		catch(Exception e) {
			log.info("unable to update tweet");
		}
		
		return new ResponseEntity<>("unable to update tweet.",HttpStatus.BAD_REQUEST);
	}
	
	//post comments 
	@PostMapping(value="/tweets/{username}/reply/{id}")
	public boolean commentByTweetIdOfUser( @PathVariable String username, @PathVariable int id,@RequestBody Comments comments){
		if(userRegistrationService.validateUsername(username)) {
			commentService.postComment(username, id, comments);
			return true;
		}
		return false;
	}
	
	//post likes
	@PutMapping(value="/tweets/{username}/like/{id}")
	public boolean likeByTweetIdOfUser( @PathVariable String username, @PathVariable int id, Tweets tweet){
		boolean like=false;
		if(userRegistrationService.validateUsername(username)) {
			
			like=true;
			tweetService.getLikesByTweetId(id,like);
			return true;
		}
		return false;
	}
	
	//get all comments
	@GetMapping(value="/tweets/all/comments/{id}")
	public List<Comments> getAllCommentsByTweetId(@RequestBody @PathVariable int id){
		return commentService.getAllCommentsByTweetId(id);
	}
	
}
